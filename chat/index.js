const express = require("express");
const socket = require("socket.io");
const cors = require("cors");
const port = process.env.PORT || 4500;
const app = express();

app.use(cors());
app.use(express.json());

const server = app.listen(port, () => {
  console.log(`Server started on port ${port}`);
});

//the server will be ran through socket io
const io = socket(server, {
  cors: {
    origin: "http://localhost:3000",
  },
});

let currentUser = {};

//this is where socket io is operating
io.on("connection", (socket) => {
  //shows the id of the current socket connection
  //the id is generated by socket io
  console.log(socket.id);

  //function for when there is a new user in the room
  socket.on("enterRoom", (data) => {
    //client will join the room
    socket.join(data.room);
    //the users information
    let userObj = {
      username: data.username,
      id: socket.id,
    };

    //checks on what users are in the current room
    if (!currentUsers[data.room]) {
      currentUsers[data.room] = [];
      let exitingUser = currentUsers[data.room].find(
        (user) => user.username === data.username
      );
      if (!exitingUser) {
        currentUsers[data.room].push(userObj);
      }
    } else {
      let exitingUser = currentUsers[data.room].find(
        (user) => user.username === data.username
      );
      if (!exitingUser) {
        currentUsers[data.room].push(userObj);
      }
    }

    //shows the user data
    console.log(`User ${data.username} has entered the ${data.room} room`);
    io.to(data.room).emit("sendList", currentUsers);
  });

  //show the current messages to the console
  //@todo add a filter api here
  socket.on("sendMessage", (data) => {
    console.log(data);
    socket.to(data.room).emit("receiveMessage", data.content);
  });

  //removes the user from the room
  socket.on("disconnect", () => {
    for (const item in currentUsers) {
      currentUsers[item] = currentUsers[item].filter(
        (obj) => obj.id != socket.id
      );
    }

    console.log("A user has disconnected");
    //show the new current users in the room
    io.emit("sendList", currentUsers);
  });
});
